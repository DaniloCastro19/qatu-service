stages:
  - test
  - unit-test
  - coverage
  - push-image

image: docker:24.0

services:
  - name: docker:24.0-dind
    alias: docker

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

before_script:
  - apk add --no-cache nodejs npm

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

test-app:
  stage: test
  image: docker:24.0
  services:
    - name: docker:24.0-dind
      alias: docker

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  

  script:
    - docker build --target builder .

unit-tests:
  stage: unit-test
  image: docker:24.0
  services:
    - name: docker:24.0-dind
      alias: docker

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

  script:
    - docker build --target unit-tests .

coverage-report:
  stage: coverage
  image: docker:24.0
  services:
    - name: docker:24.0-dind
      alias: docker

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  
  script:
    - docker build --target coverage .

push-container-image:
  stage: push-image
  image: docker:24.0
  before_script:
    - apk add --no-cache nodejs npm
    - echo "$REGISTRY_TOKEN" | docker login registry.gitlab.com -u $LOGIN_USER --password-stdin
  script:
    - npm install -g semantic-release @semantic-release/changelog @semantic-release/git
    - npx semantic-release --dry-run
    - export NEW_VERSION=$(npx semantic-release --dry-run | grep "next release version is" | awk '{print $NF}')
    
    - if [ -z "$NEW_VERSION" ]; then export NEW_VERSION="1.0.0"; fi
    - docker build -t "$CI_REGISTRY_IMAGE:$NEW_VERSION" --target production .
    - docker push "$CI_REGISTRY_IMAGE:$NEW_VERSION"
    
    - docker tag "$CI_REGISTRY_IMAGE:$NEW_VERSION" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    