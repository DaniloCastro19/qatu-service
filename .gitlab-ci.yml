stages:
  - test
  - sonar_analysis
  - push-image
  - acceptance
  - deliver

image: docker:24.0

services:
  - name: docker:24.0-dind
    alias: docker

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

before_script:
  - apk add --no-cache nodejs npm

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

test-app:
  stage: test
  image: docker:24.0
  services:
    - name: docker:24.0-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker build --target builder -t local-builder .
    - docker create --name temp-container local-builder
    - docker cp temp-container:/app/coverage ./coverage
    - docker rm temp-container
  artifacts:
    paths:
      - coverage/

sonar_analysis:
  stage: sonar_analysis
  image:
    name: sonarsource/sonar-scanner-cli:11.3.1.1910_7.1.0
    entrypoint: [""]
  before_script: []
  script:
    - sonar-scanner  
      -Dsonar.projectKey="qatu-service"
      -Dsonar.sources=src
      -Dsonar.host.url=$SONAR_HOST_URL    
      -Dsonar.login=$SONAR_TOKEN    
      -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info    
      -Dsonar.qualitygate.wait=true  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  allow_failure: true
  dependencies:
    - test-app

push-container-image:
  stage: push-image
  script:
    - echo "$REGISTRY_TOKEN" | docker login registry.gitlab.com -u $LOGIN_USER --password-stdin
    - export VERSION=$(cat version.txt)
    - docker build -t "$CI_REGISTRY_IMAGE:DEV-$VERSION" --target production .
    - docker push "$CI_REGISTRY_IMAGE:DEV-$VERSION"
  dependencies:
    - sonar_analysis

acceptance-tests:
  stage: acceptance
  image: curlimages/curl:7.78.0
  services:
    - name: docker:24.0-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - export VERSION=$(cat version.txt)
    - echo "Testing image: DEV-$VERSION"
    - docker pull "$CI_REGISTRY_IMAGE:DEV-$VERSION"
    - docker run -d -p 3000:3000 --name acceptance-container "$CI_REGISTRY_IMAGE:DEV-$VERSION"
    - sleep 10
    - |
      bash -c '
      endpoints="/users /auth/login /products/ /orders/buyer /orders /products?name=true&asce=true"
      for endpoint in $endpoints; do
        echo "Testing $endpoint"
        status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/QatuService/v1$endpoint)
        if [ "$status" -ne 200 ]; then
          echo "Fail in $endpoint with $status"
          docker logs acceptance-container
          docker stop acceptance-container && docker rm acceptance-container
          exit 1
        fi
      done
      echo "All tests passed"
      docker stop acceptance-container && docker rm acceptance-container
      '
  dependencies:
    - push-container-image


retag-and-push-LTS:
  stage: deliver
  image: docker:24.0
  only:
    - main
  before_script:
    - echo "$REGISTRY_TOKEN" | docker login registry.gitlab.com -u $LOGIN_USER --password-stdin
  script:
    - export VERSION=$(cat version.txt)
    - echo "DEV-$VERSION to LTS-$VERSION"
    - docker pull "$CI_REGISTRY_IMAGE:DEV-$VERSION"
    - docker tag "$CI_REGISTRY_IMAGE:DEV-$VERSION" "$CI_REGISTRY_IMAGE:LTS-$VERSION"
    - docker push "$CI_REGISTRY_IMAGE:LTS-$VERSION"
  dependencies:
    - acceptance-tests

